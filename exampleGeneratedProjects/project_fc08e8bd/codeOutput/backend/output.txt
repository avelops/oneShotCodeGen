```json
{
    "folders": ["backend", "backend/models", "backend/controllers", "backend/routes", "backend/middleware", "backend/config"],
    "files": {
        "backend/server.js": "const express = require('express');\nconst cors = require('cors');\nconst bodyParser = require('body-parser');\nconst { sequelize } = require('./models');\nconst taskRoutes = require('./routes/taskRoutes');\nconst categoryRoutes = require('./routes/categoryRoutes');\n\nconst app = express();\n\napp.use(cors());\napp.use(bodyParser.json());\n\napp.use('/api/tasks', taskRoutes);\napp.use('/api/categories', categoryRoutes);\n\nconst PORT = 3000;\n\n(async () => {\n    try {\n        await sequelize.sync({ force: true });\n        console.log('Database synced successfully.');\n        app.listen(PORT, () => {\n            console.log(`Server is running on port ${PORT}`);\n        });\n    } catch (error) {\n        console.error('Unable to connect to the database:', error);\n    }\n})();",
        "backend/models/index.js": "const { Sequelize } = require('sequelize');\nconst sequelize = new Sequelize({\n    dialect: 'sqlite',\n    storage: './database.sqlite'\n});\n\nconst models = {};\nmodels.Task = require('./task')(sequelize);\nmodels.Category = require('./category')(sequelize);\n\nmodels.Task.belongsToMany(models.Category, { through: 'TaskCategories' });\nmodels.Category.belongsToMany(models.Task, { through: 'TaskCategories' });\n\nmodule.exports = { sequelize, ...models };",
        "backend/models/task.js": "const { DataTypes } = require('sequelize');\n\nmodule.exports = (sequelize) => {\n    return sequelize.define('Task', {\n        id: {\n            type: DataTypes.INTEGER,\n            autoIncrement: true,\n            primaryKey: true\n        },\n        title: {\n            type: DataTypes.STRING,\n            allowNull: false\n        },\n        description: {\n            type: DataTypes.TEXT\n        },\n        dueDate: {\n            type: DataTypes.DATE\n        },\n        priority: {\n            type: DataTypes.ENUM('Low', 'Medium', 'High'),\n            defaultValue: 'Low'\n        },\n        status: {\n            type: DataTypes.ENUM('To Do', 'In Progress', 'Completed'),\n            defaultValue: 'To Do'\n        },\n        createdAt: {\n            type: DataTypes.DATE,\n            defaultValue: DataTypes.NOW\n        },\n        updatedAt: {\n            type: DataTypes.DATE,\n            defaultValue: DataTypes.NOW\n        }\n    });\n};",
        "backend/models/category.js": "const { DataTypes } = require('sequelize');\n\nmodule.exports = (sequelize) => {\n    return sequelize.define('Category', {\n        id: {\n            type: DataTypes.INTEGER,\n            autoIncrement: true,\n            primaryKey: true\n        },\n        name: {\n            type: DataTypes.STRING,\n            unique: true,\n            allowNull: false\n        }\n    });\n};",
        "backend/controllers/taskController.js": "const { Task, Category } = require('../models');\n\nmodule.exports = {\n    async getAllTasks(req, res) {\n        try {\n            const tasks = await Task.findAll({ include: Category });\n            res.status(200).json(tasks);\n        } catch (error) {\n            res.status(500).json({ error: error.message });\n        }\n    },\n\n    async createTask(req, res) {\n        try {\n            const { title, description, dueDate, priority, status, categories } = req.body;\n            const task = await Task.create({ title, description, dueDate, priority, status });\n            if (categories) {\n                const categoryInstances = await Category.findAll({ where: { id: categories } });\n                await task.setCategories(categoryInstances);\n            }\n            res.status(201).json(task);\n        } catch (error) {\n            res.status(400).json({ error: error.message });\n        }\n    },\n\n    async updateTask(req, res) {\n        try {\n            const { id } = req.params;\n            const { title, description, dueDate, priority, status, categories } = req.body;\n            const task = await Task.findByPk(id);\n            if (!task) {\n                return res.status(404).json({ error: 'Task not found' });\n            }\n            await task.update({ title, description, dueDate, priority, status });\n            if (categories) {\n                const categoryInstances = await Category.findAll({ where: { id: categories } });\n                await task.setCategories(categoryInstances);\n            }\n            res.status(200).json(task);\n        } catch (error) {\n            res.status(400).json({ error: error.message });\n        }\n    },\n\n    async deleteTask(req, res) {\n        try {\n            const { id } = req.params;\n            const task = await Task.findByPk(id);\n            if (!task) {\n                return res.status(404).json({ error: 'Task not found' });\n            }\n            await task.destroy();\n            res.status(204).send();\n        } catch (error) {\n            res.status(500).json({ error: error.message });\n        }\n    }\n};",
        "backend/controllers/categoryController.js": "const { Category } = require('../models');\n\nmodule.exports = {\n    async getAllCategories(req, res) {\n        try {\n            const categories = await Category.findAll();\n            res.status(200).json(categories);\n        } catch (error) {\n            res.status(500).json({ error: error.message });\n        }\n    },\n\n    async createCategory(req, res) {\n        try {\n            const { name } = req.body;\n            const category = await Category.create({ name });\n            res.status(201).json(category);\n        } catch (error) {\n            res.status(400).json({ error: error.message });\n        }\n    }\n};",
        "backend/routes/taskRoutes.js": "const express = require('express');\nconst taskController = require('../controllers/taskController');\n\nconst router = express.Router();\n\nrouter.get('/', taskController.getAllTasks);\nrouter.post('/', taskController.createTask);\nrouter.put('/:id', taskController.updateTask);\nrouter.delete('/:id', taskController.deleteTask);\n\nmodule.exports = router;",
        "backend/routes/categoryRoutes.js": "const express = require('express');\nconst categoryController = require('../controllers/categoryController');\n\nconst router = express.Router();\n\nrouter.get('/', categoryController.getAllCategories);\nrouter.post('/', categoryController.createCategory);\n\nmodule.exports = router;"
    },
    "commands": [
        "mkdir backend",
        "cd backend && npm init -y",
        "cd backend && npm install express cors body-parser sqlite3 sequelize sequelize-cli",
        "cd backend && npm install --save-dev nodemon",
        "cd backend && npx sequelize-cli init"
    ]
}
```