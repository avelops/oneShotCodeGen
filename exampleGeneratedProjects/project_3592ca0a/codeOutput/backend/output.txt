```json
{
    "folders": ["backend/src/models", "backend/src/controllers", "backend/src/routes", "backend/src/middleware", "backend/src/config", "backend/mock-data"],
    "files": {
        "backend/src/config/database.js": "const { Sequelize } = require('sequelize');\n\nconst sequelize = new Sequelize({\n  dialect: 'sqlite',\n  storage: './database.sqlite3',\n  logging: false,\n});\n\nmodule.exports = sequelize;",
        "backend/src/models/User.js": "const { DataTypes } = require('sequelize');\nconst sequelize = require('../config/database');\n\nconst User = sequelize.define('User', {\n  id: {\n    type: DataTypes.INTEGER,\n    autoIncrement: true,\n    primaryKey: true,\n  },\n  name: {\n    type: DataTypes.STRING,\n    allowNull: false,\n  },\n  email: {\n    type: DataTypes.STRING,\n    allowNull: false,\n    unique: true,\n  },\n  password: {\n    type: DataTypes.STRING,\n    allowNull: false,\n  },\n});\n\nmodule.exports = User;",
        "backend/src/models/Category.js": "const { DataTypes } = require('sequelize');\nconst sequelize = require('../config/database');\n\nconst Category = sequelize.define('Category', {\n  id: {\n    type: DataTypes.INTEGER,\n    autoIncrement: true,\n    primaryKey: true,\n  },\n  name: {\n    type: DataTypes.STRING,\n    allowNull: false,\n  },\n  userId: {\n    type: DataTypes.INTEGER,\n    allowNull: false,\n  },\n});\n\nmodule.exports = Category;",
        "backend/src/models/Task.js": "const { DataTypes } = require('sequelize');\nconst sequelize = require('../config/database');\n\nconst Task = sequelize.define('Task', {\n  id: {\n    type: DataTypes.INTEGER,\n    autoIncrement: true,\n    primaryKey: true,\n  },\n  title: {\n    type: DataTypes.STRING,\n    allowNull: false,\n  },\n  description: {\n    type: DataTypes.STRING,\n    allowNull: true,\n  },\n  dueDate: {\n    type: DataTypes.DATE,\n    allowNull: true,\n  },\n  priority: {\n    type: DataTypes.ENUM('High', 'Medium', 'Low'),\n    allowNull: false,\n  },\n  status: {\n    type: DataTypes.ENUM('Pending', 'In Progress', 'Completed'),\n    allowNull: false,\n  },\n  categoryId: {\n    type: DataTypes.INTEGER,\n    allowNull: false,\n  },\n  userId: {\n    type: DataTypes.INTEGER,\n    allowNull: false,\n  },\n});\n\nmodule.exports = Task;",
        "backend/src/controllers/userController.js": "const bcrypt = require('bcrypt');\nconst jwt = require('jsonwebtoken');\nconst User = require('../models/User');\n\nexports.signup = async (req, res) => {\n  try {\n    const { name, email, password } = req.body;\n    const hashedPassword = await bcrypt.hash(password, 10);\n    await User.create({ name, email, password: hashedPassword });\n    res.status(201).json({ message: 'User created successfully' });\n  } catch (error) {\n    res.status(400).json({ error: error.message });\n  }\n};\n\nexports.login = async (req, res) => {\n  try {\n    const { email, password } = req.body;\n    const user = await User.findOne({ where: { email } });\n    if (!user || !(await bcrypt.compare(password, user.password))) {\n      throw new Error('Invalid credentials');\n    }\n    const token = jwt.sign({ id: user.id }, 'secret', { expiresIn: '1h' });\n    res.status(200).json({ token });\n  } catch (error) {\n    res.status(401).json({ error: error.message });\n  }\n};",
        "backend/src/controllers/taskController.js": "const Task = require('../models/Task');\n\nexports.getAllTasks = async (req, res) => {\n  try {\n    const tasks = await Task.findAll({ where: { userId: req.user.id } });\n    res.status(200).json(tasks);\n  } catch (error) {\n    res.status(500).json({ error: error.message });\n  }\n};\n\nexports.createTask = async (req, res) => {\n  try {\n    const { title, description, dueDate, priority, status, categoryId } = req.body;\n    const task = await Task.create({ title, description, dueDate, priority, status, categoryId, userId: req.user.id });\n    res.status(201).json(task);\n  } catch (error) {\n    res.status(400).json({ error: error.message });\n  }\n};",
        "backend/src/controllers/categoryController.js": "const Category = require('../models/Category');\n\nexports.getAllCategories = async (req, res) => {\n  try {\n    const categories = await Category.findAll({ where: { userId: req.user.id } });\n    res.status(200).json(categories);\n  } catch (error) {\n    res.status(500).json({ error: error.message });\n  }\n};\n\nexports.createCategory = async (req, res) => {\n  try {\n    const { name } = req.body;\n    const category = await Category.create({ name, userId: req.user.id });\n    res.status(201).json(category);\n  } catch (error) {\n    res.status(400).json({ error: error.message });\n  }\n};",
        "backend/src/routes/userRoutes.js": "const express = require('express');\nconst router = express.Router();\nconst userController = require('../controllers/userController');\n\nrouter.post('/signup', userController.signup);\nrouter.post('/login', userController.login);\n\nmodule.exports = router;",
        "backend/src/routes/taskRoutes.js": "const express = require('express');\nconst router = express.Router();\nconst taskController = require('../controllers/taskController');\nconst auth = require('../middleware/auth');\n\nrouter.get('/', auth, taskController.getAllTasks);\nrouter.post('/', auth, taskController.createTask);\n\nmodule.exports = router;",
        "backend/src/routes/categoryRoutes.js": "const express = require('express');\nconst router = express.Router();\nconst categoryController = require('../controllers/categoryController');\nconst auth = require('../middleware/auth');\n\nrouter.get('/', auth, categoryController.getAllCategories);\nrouter.post('/', auth, categoryController.createCategory);\n\nmodule.exports = router;",
        "backend/src/routes/index.js": "const express = require('express');\nconst router = express.Router();\n\nconst userRoutes = require('./userRoutes');\nconst taskRoutes = require('./taskRoutes');\nconst categoryRoutes = require('./categoryRoutes');\n\nrouter.use('/auth', userRoutes);\nrouter.use('/tasks', taskRoutes);\nrouter.use('/categories', categoryRoutes);\n\nmodule.exports = router;",
        "backend/src/middleware/auth.js": "const jwt = require('jsonwebtoken');\nconst User = require('../models/User');\n\nmodule.exports = async (req, res, next) => {\n  try {\n    const token = req.header('Authorization').replace('Bearer ', '');\n    const decoded = jwt.verify(token, 'secret');\n    const user = await User.findByPk(decoded.id);\n    if (!user) {\n      throw new Error('User not found');\n    }\n    req.user = user;\n    next();\n  } catch (error) {\n    res.status(401).json({ error: 'Please authenticate.' });\n  }\n};",
        "backend/server.js": "const express = require('express');\nconst app = express();\nconst sequelize = require('./src/config/database');\nconst routes = require('./src/routes/index');\nconst cors = require('cors');\n\napp.use(cors());\napp.use(express.json());\napp.use('/api', routes);\n\nconst PORT = process.env.PORT || 3000;\nsequelize.sync({ force: false }).then(() => {\n  app.listen(PORT, () => {\n    console.log(`Server is running on port ${PORT}`);\n  });\n});",
        "backend/mock-data/mockData.js": "const bcrypt = require('bcrypt');\nconst User = require('../src/models/User');\nconst Category = require('../src/models/Category');\nconst Task = require('../src/models/Task');\nconst sequelize = require('../src/config/database');\n\n(async () => {\n  await sequelize.sync({ force: true });\n\n  const password = await bcrypt.hash('123456', 10);\n  const user = await User.create({ name: 'Test User', email: 'user@example.com', password });\n\n  const category1 = await Category.create({ name: 'Work', userId: user.id });\n  const category2 = await Category.create({ name: 'Personal', userId: user.id });\n\n  await Task.create({\n    title: 'Task 1',\n    description: 'Complete the project',\n    dueDate: new Date(),\n    priority: 'High',\n    status: 'Pending',\n    categoryId: category1.id,\n    userId: user.id\n  });\n\n  await Task.create({\n    title: 'Task 2',\n    description: 'Buy groceries',\n    dueDate: new Date(),\n    priority: 'Medium',\n    status: 'Pending',\n    categoryId: category2.id,\n    userId: user.id\n  });\n})();"
    },
    "commands": [
        "mkdir backend",
        "cd backend && npm init -y",
        "cd backend && npm install express sequelize sqlite3 cors jsonwebtoken bcrypt",
        "cd backend && npm install --save-dev nodemon"
    ]
}
```